#include <iostream>
#include <unordered_map>
#include <vector>
#include <limits>
using namespace std;

int main() {
    int n, capacity;
    cout << "Enter number of pages: ";
    cin >> n;

    vector<int> pages(n);
    cout << "Enter page reference string:\n";
    for (int i = 0; i < n; i++)
        cin >> pages[i];

    cout << "Enter number of frames: ";
    cin >> capacity;

    unordered_map<int, int> freq; // page → frequency
    vector<int> frames;
    int faults = 0;

    cout << "\nPage\tFrames\t\tPage Fault\n";
    cout << "-------------------------------------\n";

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        bool fault = false;

        // If page is already in memory
        bool found = false;
        for (int f : frames) {
            if (f == page) {
                found = true;
                freq[page]++;
                break;
            }
        }

        // If not found → page fault
        if (!found) {
            faults++;
            fault = true;

            // If frame is full, replace LFU
            if (frames.size() == capacity) {
                int minFreq = INT_MAX, victimIndex = -1;
                for (int j = 0; j < frames.size(); j++) {
                    if (freq[frames[j]] < minFreq) {
                        minFreq = freq[frames[j]];
                        victimIndex = j;
                    }
                }
                freq.erase(frames[victimIndex]);
                frames[victimIndex] = page;
            } else {
                frames.push_back(page);
            }
            freq[page] = 1;
        }

        // Print current step
        cout << page << "\t";
        for (int f : frames)
            cout << f << " ";
        if (frames.size() < capacity)
            for (int k = 0; k < capacity - frames.size(); k++)
                cout << "- ";
        cout << "\t\t" << (fault ? "Yes" : "No") << endl;
    }

    cout << "\nTotal Page Faults: " << faults << endl;

    return 0;
}


Output:
Enter number of pages: 10
Enter page reference string:
1 2 3 2 4 1 5 2 1 3
Enter number of frames: 3


Page	Frames		Page Fault
-------------------------------------
1	1 - -		Yes
2	1 2 -		Yes
3	1 2 3		Yes
2	1 2 3		No
4	2 3 4		Yes
1	3 4 1		Yes
5	4 1 5		Yes
2	1 5 2		Yes
1	5 2 1		Yes
3	2 1 3		Yes

Total Page Faults: 9
